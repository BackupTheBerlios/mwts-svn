' Gambas class file

PROPERTY READ path AS String ' contains the filename including full path on hdd
PROPERTY newpath AS String ' if not set differently, contains the same as path, will be applied on save
PROPERTY tag AS CTag ' contains all (supported) tags of the specified file
PROPERTY READ changed AS Boolean ' returns whether anything on this file was changed (not yet saved)
PROPERTY READ header AS CMPEGHeader ' contains some informations from MPEG-header(s to come)

PRIVATE $tag AS CTag
PRIVATE $path AS String
PRIVATE $changed AS Boolean
PRIVATE $newpath AS String
PRIVATE $header AS CMPEGHeader

' reading all "knowable" information: tags and headers
PUBLIC SUB _new(OPTIONAL filepath AS String = "")
  
  DIM t AS CMPEGHeader
  
  IF NOT Exist(filepath) THEN RETURN 
  $path = filepath
  $newpath = filepath
  $tag = NEW CTag(ME, filepath)
  $header = getFileHeader(filepath)
  
END

' this function is needed in every class which shall be mergable
' it is used by MHelp.merge() to determine the "None"-value for each item, because this might differ
PUBLIC FUNCTION getNone(which AS String) AS Variant
  
  SELECT CASE which
    CASE "tag"
      RETURN NULL
    CASE "path"
      RETURN ""
    CASE "changed"
      RETURN TRUE
    CASE "header"
      RETURN NULL
    CASE "newpath"
      RETURN ""
  END SELECT 
  
END

PUBLIC SUB save()
  
  DIM t AS CTagv1
  
  t = NEW CTagv1($path)
  
  
END

PUBLIC FUNCTION getFromFile(start AS Integer, size AS Integer) AS String
  
  DIM f AS File
  DIM s AS String
  
  f = OPEN $path FOR INPUT 
  SEEK #f, start
  READ #f, s, size
  CLOSE #f
  RETURN s
  
END


' returns the first MPEG-header in file
STATIC PUBLIC FUNCTION getFileHeader(path AS String) AS CMPEGHeader
  
  DIM x AS Integer
  DIM t AS String
  DIM u AS String
  DIM v AS String
  DIM f AS File
  DIM result AS CMPEGHeader
  
  IF NOT Exist(path) THEN RETURN result
  

' single, faster than below (especially when reading for the first time (cache => wtf? (?))
  f = OPEN path FOR INPUT  
  
  WHILE NOT Eof(f)
    READ #f, t, 1
    bla:
    IF t = Chr(255) THEN 
      READ #f, u, 1
      IF (Asc(u) AND &HE0) = &HE0 THEN 
        READ #f, v, 2
        result = NEW CMPEGHeader(t & u & v)
        RETURN result 
      ELSE IF u = Chr(255) THEN 
        t = u
        GOTO bla
      END IF
    END IF
  WEND 
  
  CLOSE #f
  
' single, full read needed
'   t = File.Load(path)
'   
'   x = InStr(t, Chr(255))
'   WHILE x
'     IF (Asc(Mid(t, x + 1, 1)) AND &HE0) = &HE0 THEN 
'       result = NEW CMPEGHeader(Mid(t, x, 4))
'       BREAK 
'     END IF
'     x = InStr(t, Chr(255), x + 4)
'   WEND 

' multiple, slow
'   t = File.Load(path)
'   x = InStr(t, Chr(255))
'   WHILE x
'     IF (Asc(Mid(t, x + 1, 1)) AND &HE0) = &HE0 THEN 
'       a = NEW CMPEGHeader(Mid(t, x, 4))
'       result.Add(a)
'     END IF
'     x = InStr(t, Chr(255), x + 4)
'   WEND
  result = NEW CMPEGHeader
  RETURN result
  
END

' trims subsequential zero-bytes away
STATIC PUBLIC FUNCTION trimzero(v AS String) AS String
  RETURN Left(v, InStr(v, Chr(0)) - 1)
END

PRIVATE FUNCTION path_Read() AS String
  RETURN $path
END
PRIVATE FUNCTION Tag_Read() AS CTag
  RETURN $tag
END
PRIVATE SUB Tag_Write(Value AS CTag)
  $tag = Value
  $changed = TRUE
END
PRIVATE FUNCTION changed_Read() AS Boolean
  RETURN $changed OR $tag.changed
END
PRIVATE FUNCTION newpath_Read() AS String
  RETURN $newpath
END
PRIVATE SUB newpath_Write(Value AS String)
  $newpath = Value
  $changed = TRUE
END
PRIVATE FUNCTION header_Read() AS CMPEGHeader
  RETURN $header
END

