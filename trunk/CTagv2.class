
PUBLIC CONST trackNone AS Integer = 0

PROPERTY artist AS String
PROPERTY album AS String
PROPERTY track AS Integer
PROPERTY year AS Integer
PROPERTY genre AS String
PROPERTY title AS String
PROPERTY comment AS String

PROPERTY READ isEmpty AS Boolean
PROPERTY version AS Float
PROPERTY READ changed AS Boolean
PROPERTY READ header AS CTagv2Header
PROPERTY READ extHeader AS CTagv2ExtHeader

PRIVATE $artist AS String
PRIVATE $album AS String
PRIVATE $track AS Integer
PRIVATE $year AS Integer
PRIVATE $genre AS String
PRIVATE $title AS String
PRIVATE $comment AS String

PRIVATE $changed AS Boolean
PRIVATE $version AS String
PRIVATE $header AS CTagv2Header
PRIVATE $extHeader AS CTagv2ExtHeader
PRIVATE $body AS String ' contains all frames and the optional padding

PUBLIC SUB _new(OPTIONAL path AS String = NULL)
  
  DIM s AS String
  DIM x AS Integer
  DIM y AS Integer
  
  DIM begin AS Integer
  DIM size AS Integer
  
  IF IsNull(path) OR NOT Exist(path) THEN RETURN 
  
  begin = InStr(s, "ID3")
  IF begin = 0 THEN RETURN 
  
  $header = NEW CTagv2Header(Mid(s, begin, 10))
  $version = $header.version
  
  $extHeader = NEW CTagv2ExtHeader(Mid(s, begin + $header.size))
  $body = Mid(s, begin + $header.size + $extHeader.size, $header.tagSize - $extHeader.size)
  
END

STATIC PUBLIC FUNCTION DeSynchsafe(s AS String) AS Long

  DIM result AS Long
  DIM x AS Integer
  DIM y AS Byte
  DIM z AS Integer = 0
  
  FOR x = Len(s) TO 1 STEP -1
    y = CByte(Asc(Mid(s, x, 1)))
    IF BTst(y, 7) THEN STOP 
    DO
      IF BTst(y, z MOD 7) THEN BSet(result, z)
      INC z
    LOOP UNTIL (z MOD 7) = 0
  NEXT 
  RETURN result
  
END


PUBLIC FUNCTION getNone(which AS String) AS Variant
  
  SELECT CASE which
    CASE "track"
      RETURN trackNone
    CASE ELSE  
      RETURN ""
  END SELECT 
  
END

PRIVATE FUNCTION artist_Read() AS String
  RETURN $artist
END
PRIVATE SUB artist_Write(Value AS String)
  $artist = Value
  $changed = TRUE
END
PRIVATE FUNCTION album_Read() AS String
  RETURN $album
END
PRIVATE SUB album_Write(Value AS String)
  $album = Value
  $changed = TRUE
END
PRIVATE FUNCTION track_Read() AS Integer
  RETURN $track
END
PRIVATE SUB track_Write(Value AS Integer)
  $track = Value
  $changed = TRUE
END
PRIVATE FUNCTION year_Read() AS Integer
  RETURN $year
END
PRIVATE SUB year_Write(Value AS Integer)
  $year = Value
  $changed = TRUE
END
PRIVATE FUNCTION genre_Read() AS String
  RETURN $genre
END
PRIVATE SUB genre_Write(Value AS String)
  $genre = Value
  $changed = TRUE
END
PRIVATE FUNCTION title_Read() AS String
  RETURN $title
END
PRIVATE SUB title_Write(Value AS String)
  $title = Value
  $changed = TRUE
END
PRIVATE FUNCTION isEmpty_Read() AS Boolean
  IF Len(ME.album) > 0 THEN RETURN FALSE
  IF Len(ME.artist) > 0 THEN RETURN FALSE
  IF Len(ME.comment) > 0 THEN RETURN FALSE
  IF Len(ME.genre) > 0 THEN RETURN FALSE
  IF Len(ME.title) > 0 THEN RETURN FALSE
  IF ME.track >= 0 THEN RETURN FALSE
  IF ME.year > 0 THEN RETURN FALSE
  RETURN TRUE
END 
PRIVATE FUNCTION comment_Read() AS String
  RETURN $comment
END
PRIVATE SUB comment_Write(Value AS String)
  $comment = Value
  $changed = TRUE
END
PRIVATE FUNCTION version_Read() AS Float
  RETURN Val($version)
END
PRIVATE SUB version_Write(Value AS Float)
  $version = Str(Value)
END
PRIVATE FUNCTION changed_Read() AS Boolean
  RETURN $changed
END
PRIVATE FUNCTION header_Read() AS CTagv2Header
  RETURN $header
END
PRIVATE FUNCTION extHeader_Read() AS CTagv2ExtHeader
  RETURN $extHeader
END
