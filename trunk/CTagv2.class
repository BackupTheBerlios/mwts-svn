
PUBLIC CONST trackNone AS Integer = 0

PROPERTY artist AS String[] 
PROPERTY album AS String[]
PROPERTY track AS Integer[]
PROPERTY year AS Integer[]
PROPERTY genre AS String[]
PROPERTY title AS String[]
PROPERTY comment AS String

PROPERTY READ isEmpty AS Boolean
PROPERTY version AS Float
PROPERTY READ changed AS Boolean
PROPERTY READ header AS CTagv2Header
PROPERTY READ extHeader AS CTagv2ExtHeader
PROPERTY READ statusOK AS Boolean

PRIVATE $changed AS Boolean
PRIVATE $status AS Boolean
PRIVATE $version AS String
PRIVATE $header AS CTagv2Header
PRIVATE $extHeader AS CTagv2ExtHeader
PRIVATE $body AS String ' contains all frames and the optional padding
PRIVATE $frames AS Collection ' contains all frames

PUBLIC SUB _new(OPTIONAL path AS String = NULL)
  
  DIM s AS String
  DIM x AS Integer
  DIM y AS Integer
  
  DIM begin AS Integer
  DIM size AS Integer
  
  RETURN 
  IF IsNull(path) OR NOT Exist(path) THEN RETURN 
  
  s = File.Load(path)
  begin = InStr(s, "ID3")
  IF begin = 0 THEN RETURN 
  
  $header = NEW CTagv2Header(Mid(s, begin, 10))
  $version = $header.version
  
  $extHeader = NEW CTagv2ExtHeader(Mid(s, begin + $header.size))
  $body = Mid(s, begin + $header.size + $extHeader.size, $header.tagSize - $extHeader.size)
  
  $frames = getFrames($body)
  $status = TRUE
  
END

PUBLIC FUNCTION _get(id AS String) AS Object
  IF $frames.Exist(id) THEN RETURN $frames[id]
  ' create new one and add it to $frames
  RETURN NULL
END

STATIC PUBLIC FUNCTION getFrames(data AS String) AS Collection
  
  DIM result AS NEW Collection
  DIM h AS CTagv2FrameHeader
  DIM f AS CTagv2Frame
  DIM s AS String
  
  DO
    IF Left(data) = Chr(0) THEN BREAK 
    h = NEW CTagv2FrameHeader(Left(data, 10))
    s = Mid(data, 1 + h.size, h.frameSize)
    f = CTagv2Frame.getFrame(h, s)
    result.Add(f, h.id)
    data = Mid(data, 1 + h.size + h.frameSize)
  LOOP 
  RETURN result
  
END


STATIC PUBLIC FUNCTION DeSynchsafe(s AS String) AS Long

  DIM result AS Long
  DIM x AS Integer
  DIM y AS Byte
  DIM z AS Integer = 0
  
  FOR x = Len(s) TO 1 STEP -1
    y = CByte(Asc(Mid(s, x, 1)))
    IF BTst(y, 7) THEN STOP 
    DO
      IF BTst(y, z MOD 7) THEN BSet(result, z)
      INC z
    LOOP UNTIL (z MOD 7) = 0
  NEXT 
  RETURN result
  
END

STATIC PUBLIC FUNCTION Synchsafe(i AS Integer, OPTIONAL length AS Integer = 0) AS String
  
  DIM result AS String
  DIM c AS Integer
  DIM x AS Integer
  DIM tmp AS Byte
  DIM akt AS String
  
  IF length = 0 THEN length = Round((Len(Bin(i)) - 1) \ 7) ' byte-count
  'result = String(length, Chr(0))
  
  FOR x = 1 TO length * 8
    IF x MOD 8 = 0 THEN 
      result = Chr(tmp) & result
      tmp = 0
      CONTINUE 
    END IF
    akt = Mid(Bin(i), Len(Bin(i)) - c, 1)
    IF Val(akt) THEN tmp = BSet(tmp, c)
    INC c
  NEXT 
  RETURN result
  
END

PUBLIC FUNCTION render() AS String
  
  DIM useFooter AS Boolean = Settings["ID3v2_UseFooter"]
  DIM usePadding AS Boolean = Settings["ID3v2_UsePadding"]
  
END

PUBLIC FUNCTION getNone(which AS String) AS Variant
  
  SELECT CASE which
    CASE "track"
      RETURN trackNone
    CASE ELSE  
      RETURN ""
  END SELECT 
  
END


PRIVATE FUNCTION artist_Read() AS String[]
  RETURN ME["TOPE"].content
END
PRIVATE SUB artist_Write(Value AS String[])
END
PRIVATE FUNCTION album_Read() AS String[]
  RETURN ME["TOAL"].content
END
PRIVATE SUB album_Write(Value AS String[])
END
PRIVATE FUNCTION track_Read() AS Integer[]
  RETURN Val(ME["TRCK"].content)
END
PRIVATE SUB track_Write(Value AS Integer[])
END
PRIVATE FUNCTION year_Read() AS Integer[]
  RETURN Val(ME["TDOR"].content)
END
PRIVATE SUB year_Write(Value AS Integer[])
END
PRIVATE FUNCTION genre_Read() AS String[]
  RETURN ME["TCON"].content
END
PRIVATE SUB genre_Write(Value AS String[])
END
PRIVATE FUNCTION title_Read() AS String[]
END
PRIVATE SUB title_Write(Value AS String[])
END
PRIVATE FUNCTION isEmpty_Read() AS Boolean
  IF Len(ME.album) > 0 THEN RETURN FALSE
  IF Len(ME.artist) > 0 THEN RETURN FALSE
  IF Len(ME.comment) > 0 THEN RETURN FALSE
  IF Len(ME.genre) > 0 THEN RETURN FALSE
  IF Len(ME.title) > 0 THEN RETURN FALSE
  IF ME.track >= 0 THEN RETURN FALSE
  IF ME.year > 0 THEN RETURN FALSE
  RETURN TRUE
END 
PRIVATE FUNCTION comment_Read() AS String
END
PRIVATE SUB comment_Write(Value AS String)
END
PRIVATE FUNCTION version_Read() AS Float
  RETURN Val($version)
END
PRIVATE SUB version_Write(Value AS Float)
  $version = Str(Value)
END
PRIVATE FUNCTION changed_Read() AS Boolean
  RETURN $changed
END
PRIVATE FUNCTION header_Read() AS CTagv2Header
  RETURN $header
END
PRIVATE FUNCTION extHeader_Read() AS CTagv2ExtHeader
  RETURN $extHeader
END
PRIVATE FUNCTION statusOK_Read() AS Boolean
  RETURN $status
END
