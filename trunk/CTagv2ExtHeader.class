
CONST max128F1MB AS Integer = 0 ' maximal 128 frames with a maximum size of 1MB of the tag in total
CONST max64F128KB AS Integer = 64 ' maximal 64 frames with a maximum size of 128KB of the tag in total
CONST max32F40KB AS Integer = 128 ' maximal 32 frames with a maximum size of 40KB of the tag in total
CONST max32F4KB AS Integer = 192 ' maximal 32 frames with a maximum size of 4KB of the tag in total

CONST noRestriction AS Integer = 0
CONST shorter1024C AS Integer = 8 ' text-fields are shorter than 1024 characters
CONST shorter128C AS Integer = 16 ' text-fields are shorter than 128 characters
CONST shorter30C AS Integer = 24 ' text-fields are shorter than 30 characters

CONST lessOrEqual256px AS Integer = 1 ' image-dimensions are less or equal to 256x256 px
CONST lessOrEqual64px AS Integer = 2 ' image-dimensions are less or equal to 64x64 px
CONST exactly64px AS Integer = 3 ' image-dimensions are exactly 64x64 px

PROPERTY READ size AS Integer ' returns the size of the extended header
PROPERTY READ tagIsUpdate AS Boolean ' returns whether this tag only is an update for an already existing tag
PROPERTY READ hasCRC AS Boolean ' returns whether the extended header includes a CRC-checksum for the tag
PROPERTY READ CRC AS Integer ' returns a possibly included CRC-checksum of the body of the tag
PROPERTY READ isRestricted AS Boolean ' returns whether any of the possible restrictions apply
PROPERTY READ resTSize AS Integer ' returns what restriction applies to the size of the tag
PROPERTY READ resTextEnc AS Boolean ' returns if text-encoding is restricted to either ISO/UTF-8 or not at all
PROPERTY READ resTFSize AS Integer ' returns what restriction applies to the size of text-fields
PROPERTY READ resImgEnc AS Boolean
PROPERTY READ resImgSize AS Integer ' returns what restriction applies to the size of images used in the tag

PRIVATE $data AS String
PRIVATE $flags AS NEW Byte[]
PRIVATE $CRC AS Integer
PRIVATE $restrictions AS Byte
PRIVATE $fseek AS Integer

PUBLIC SUB _new(OPTIONAL data AS String = NULL, OPTIONAL begin AS Integer = -1)
  
  DIM tmp AS String
  DIM x AS Integer
  DIM y AS Integer
  
  $data = data
  $fseek = begin
  
  tmp = Mid(data, 6, Asc(Mid(data, 5, 1)))
  FOR x = 1 TO Len(tmp)
    $flags.Add(Asc(Mid(tmp, x, 1)))
  NEXT
  IF Len(tmp) > 0 THEN
    x = 6 + Asc(Mid(data, 5, 1))
    IF BTst($flags[0], 6) THEN INC x
    IF BTst($flags[0], 5) THEN
      y = Asc(Mid(data, x, 1))
      INC x
      $CRC = CTagv2.DeSynchsafe(Mid(data, x, y))
      x += y
    END IF
    IF BTst($flags[0], 4) THEN $restrictions = Mid(data, x + 1, Asc(Mid(data, x, 1)))
  END IF
  
END

PRIVATE FUNCTION size_Read() AS Integer
  RETURN CInt(CTagv2.DeSynchsafe(Left($data, 4)))
END
PRIVATE FUNCTION tagIsUpdate_Read() AS Boolean
  RETURN BTst($flags[0], 6)
END
PRIVATE FUNCTION hasCRC_Read() AS Boolean
  RETURN BTst($flags[0], 5)
END
PRIVATE FUNCTION CRC_Read() AS Integer
  RETURN $CRC
END
PRIVATE FUNCTION isRestricted_Read() AS Boolean
  RETURN BTst($flags[0], 4)
END
PRIVATE FUNCTION resTSize_Read() AS Integer
  IF NOT ME.isRestricted THEN RETURN 0
  RETURN $restrictions AND 192
END
PRIVATE FUNCTION resTextEnc_Read() AS Boolean
  IF NOT ME.isRestricted THEN RETURN FALSE
  RETURN BTst($restrictions, 5)
END
PRIVATE FUNCTION resTFSize_Read() AS Integer
  IF NOT ME.isRestricted THEN RETURN 0
  RETURN $restrictions AND 24
END
PRIVATE FUNCTION resImgEnc_Read() AS Boolean
  IF NOT ME.isRestricted THEN RETURN FALSE
  RETURN BTst($restrictions, 2)
END
PRIVATE FUNCTION resImgSize_Read() AS Integer
  IF NOT ME.isRestricted THEN RETURN 0
  RETURN $restrictions AND 3
END
