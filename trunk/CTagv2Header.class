' Gambas class file

PROPERTY READ size AS Integer ' returns the size of the tag-header (always 10 bytes per definition)
PROPERTY READ tagSize AS Integer ' returns the size of the complete tag (after compression/encryption/unsynchronisation/etc.)
PROPERTY READ version AS String ' returns the version of the tag
PROPERTY READ useUnsync AS Boolean ' returns whether the tag explicitely uses unsynchronisation
PROPERTY READ useExtHeader AS Boolean ' returns whether an extended header is used to further describe the tag
PROPERTY READ useExperimental AS Boolean
PROPERTY READ useFooter AS Boolean ' returns whether a footer is used
PROPERTY READ statusOK AS Boolean
PROPERTY READ fStart AS Integer ' returns the location of the beginning of the tag-header in the file

PRIVATE $data AS String
PRIVATE $fStart AS Integer
PRIVATE $tagSize AS Integer
PRIVATE $status AS Boolean

PUBLIC SUB _new(OPTIONAL data AS String = NULL, OPTIONAL fStart AS Integer = -1)
  
  IF Left(data, 3) <> "ID3" THEN RETURN 
  $data = data
  $fStart = fStart
  $tagSize = CInt(CTagv2.DeSynchsafe(Right($data, 4)))
  $status = (ME.version = "2.3.0" OR ME.version = "2.4.0")
  
END

PRIVATE FUNCTION size_Read() AS Integer
  RETURN 10
END
PRIVATE FUNCTION tagSize_Read() AS Integer
  RETURN $tagSize
END
PRIVATE FUNCTION version_Read() AS String
  RETURN "2." & Str(Asc($data, 4)) & "." & Str(Asc($data, 5))
END
PRIVATE FUNCTION useUnsync_Read() AS Boolean
  RETURN BTst(Asc(Mid($data, 6, 1)), 7)
END
PRIVATE FUNCTION useExtHeader_Read() AS Boolean
  RETURN BTst(Asc(Mid($data, 6, 1)), 6)
END
PRIVATE FUNCTION useExperimental_Read() AS Boolean
  RETURN BTst(Asc(Mid($data, 6, 1)), 5)
END
PRIVATE FUNCTION useFooter_Read() AS Boolean
  RETURN BTst(Asc(Mid($data, 6, 1)), 4)
END
PRIVATE FUNCTION fStart_Read() AS Integer
  RETURN $fStart
END
PRIVATE FUNCTION statusOK_Read() AS Boolean
  RETURN $status
END
