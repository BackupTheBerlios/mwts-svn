
INHERITS UserControl

EVENT ErrorNotFound()

EVENT Activate()
EVENT Click()
EVENT Collapse()
EVENT Compare(Key AS String, OtherKey AS String)
EVENT DblClick()
EVENT Drag()
EVENT DragMove()
EVENT Drop()
EVENT Enter()
EVENT Expand()
EVENT GotFocus()
EVENT KeyPress()
EVENT KeyRelease()
EVENT Leave()
EVENT LostFocus()
EVENT Menu()
EVENT MouseDown()
EVENT MouseMove()
EVENT MouseUp()
EVENT MouseWheel()
EVENT Rename()
EVENT Select()

'Add Clear Delete Drag Exist Find Grab Hide Lower Move MoveAbove MoveBack MoveBelow MoveChild MoveCurrent MoveFirst MoveLast MoveNext MoveParent MovePrevious MoveScaled MoveTo Raise Refresh Remove Reparent Resize ResizeScaled SelectAll SetFocus Show

PROPERTY cols AS String[] ' holding the order and the type of columns to display
PROPERTY fall AS Collection ' holding all CFile-Entries associated with the displayed stuff
PROPERTY selected AS Object[] ' holding all selected CFiles
PROPERTY sort AS Integer ' sets / returns the column to sort after
PROPERTY tips AS Boolean ' show tips about last selected file
PROPERTY READ Count AS Integer
PROPERTY READ Item AS CFViewItem
PROPERTY READ Current AS CFViewItem
PROPERTY READ changed AS Object[]

PRIVATE $cols AS NEW String[]
PRIVATE $fall AS NEW Collection

' private vars for tips
PRIVATE $tips AS Boolean
PRIVATE $tim AS Timer
PRIVATE $mx AS Integer
PRIVATE $my AS Integer

PRIVATE FList AS ColumnView
PRIVATE $pointer AS String

PUBLIC SUB _new()
  
  FList = NEW ColumnView(SUPER.Container) AS "FList"
  'Object.Attach(ME, ME, "FList")
  
  Flist.Editable = TRUE
  Flist.Sorted = TRUE
  Flist.Mode = ColumnView.Extended
  
END

PUBLIC FUNCTION _get(Key AS String) AS CFViewItem
  DIM result AS CFViewItem
  IF IsNull(Flist[Key]) THEN RETURN NULL
  result = NEW CFViewItem(ME, Flist, Key)
  RETURN result
END

PUBLIC FUNCTION _next() AS CFViewItem
  
  DIM result AS CFViewItem
  IF $pointer = "" THEN 
    IF Flist.MoveFirst() THEN RETURN 
  ELSE
    IF Flist.MoveTo($pointer) THEN RETURN 
  END IF
  IF Flist.MoveBelow() THEN RETURN 
  $pointer = Flist.Item.Key
  result = NEW CFViewItem(ME, Flist, $pointer)
  RETURN result
  
END

PUBLIC SUB tim_Timer()
  
  DIM s AS String
  DIM f AS CFile
  DIM b AS CFViewItem

  IF NOT IsNull(SUPER.Current) AND $tips THEN 
    Flist.Current.EnsureVisible()
    f = $fall[Flist.Current.Key]
    s = "Filename: %f\n"
    s &= "Bitrate: %b\n"
    s &= "MP3-Type: MPEG " & f.header.mpegversion & " Layer " & f.header.layer & "\n"
    s &= "Sample-Rate: %s\n"
    s &= "Channels: " & Choose(f.header.channels + 1, "Stereo", "Joint-Stereo", "Dual-Mono", "Mono")
    Balloon.Info(MHelp.replaceByPattern(s, f), ME, $mx - ME.ScreenX, $my - ME.ScreenY)
  END IF
  
  FOR EACH b IN Flist
  NEXT 
    
  IF NOT IsNull($tim) THEN $tim.Enabled = FALSE
  
END

PUBLIC SUB Clear()
  $fall.Clear
  Flist.Clear
END
PUBLIC FUNCTION MoveFirst() AS Boolean
  RETURN Flist.MoveFirst()
END
PUBLIC FUNCTION MoveBack() AS Boolean
  RETURN Flist.MoveBack()
END
PUBLIC FUNCTION MoveBelow() AS Boolean
  RETURN Flist.MoveBelow()
END
PUBLIC FUNCTION MoveNext() AS Boolean
  RETURN Flist.MoveNext()
END

PUBLIC SUB FList_Select()
  
  IF $tips THEN
    $tim = NEW Timer AS "tim"
    $tim.Delay = 2000
    $tim.Enabled = TRUE
    $mx = mouse.ScreenX
    $my = mouse.ScreenY
  END IF
  RAISE Select()
  
END

PUBLIC SUB FList_Menu()
  RAISE Menu
END

PUBLIC SUB FList_Rename()
  $fall[Flist.Current.Key].newpath = Flist.Current[0]
  Message("BLO")
  RAISE Rename
END

' replaces ColumnView.Add()
PUBLIC SUB Add(entry AS CFile, OPTIONAL pos AS Integer = -1)
  
  IF pos = -1 THEN 
    Flist.Add(entry.path, "")
  ELSE  
    Flist.Add(entry.path, "", NULL, NULL, pos)
  END IF
  $fall.Add(entry, entry.path)
  refresh([entry.path])
  
END

' replaces ColumnView.Remove()
PUBLIC SUB Remove(entry AS CFile)
  
  DIM x AS Integer
  
  IF NOT Flist.Exist(entry.path) THEN 
    RAISE ErrorNotFound
    RETURN 
  END IF
  Flist.Remove(entry.path)
  $fall.Remove(entry.path)
  
END

' basically is the same as ColumnView.Remove() because it works with the key
PUBLIC SUB RemFromPath(path AS String)
  
  IF NOT Flist.Exist(path) THEN 
    RAISE ErrorNotFound
    RETURN 
  END IF
  Flist.Remove(path)
  $fall.Remove(path)
  
END

' refreshes the control
PUBLIC SUB refresh(OPTIONAL paths AS String[] = NULL)
  
  DIM e AS CFile
  DIM s AS String
  DIM y AS Integer
  
  IF IsNull(paths) THEN 
    FOR EACH e IN $fall
      IF NOT Flist.Exist(e.path) THEN Flist.Add(e.path, "")
      FOR y = 0 TO $cols.Max
        Flist[e.path][y] = MHelp.getDesc($cols[y], e)
      NEXT 
    NEXT 
  ELSE 
    FOR EACH s IN paths
      IF NOT $fall.Exist(s) THEN CONTINUE 
      IF NOT Flist.Exist(s) THEN Flist.Add(s, "")
      FOR y = 0 TO $cols.Max
        IF $cols[y] = "%b" AND MHelp.getDesc($cols[y], $fall[s]) = -1 THEN 
          Flist[s][y] = "Variable"
        ELSE IF $cols[y] = "%Y" AND MHelp.getDesc($cols[y], $fall[s]) = 0 THEN 
          Flist[s][y] = ""
        ELSE
          Flist[s][y] = MHelp.getDesc($cols[y], $fall[s])
        END IF
      NEXT 
    NEXT 
  END IF    
  
END

PRIVATE FUNCTION cols_Read() AS String[]
  RETURN $cols
END
PRIVATE SUB cols_Write(Value AS String[])
  DIM x AS Integer
  IF Value.Count < 1 THEN RETURN 
  Flist.Columns.Count = Value.Count
  FOR x = 0 TO Value.Max
    Flist.Columns[x].Text = MHelp.desc[Value[x]]
  NEXT
  $cols = Value
  refresh
END
PRIVATE FUNCTION fall_Read() AS Collection
  RETURN $fall
END
PRIVATE SUB fall_Write(Value AS Collection)
  $fall = Value
  ME.refresh
END
PRIVATE FUNCTION selected_Read() AS Object[]
  DIM result AS NEW Object[]
  TRY Flist.MoveFirst
  DO
    IF Flist.Item.Selected THEN result.Add($fall[Flist.Item.Key])
  LOOP UNTIL Flist.MoveBelow()
  Flist.MoveBack
  RETURN result
END
PRIVATE SUB selected_Write(Value AS Object[])
  DIM o AS CFile
  TRY Flist.MoveFirst
  DO
    Flist.Item.Selected = FALSE
  LOOP UNTIL Flist.MoveBelow()
  Flist.MoveBack
  FOR EACH o IN Value
    Flist[o.path].Selected = TRUE
  NEXT
END
PRIVATE FUNCTION sort_Read() AS Integer
  RETURN Flist.Columns.Sort
END
PRIVATE SUB sort_Write(Value AS Integer)
  Flist.Columns.Sort = Value
END
PRIVATE FUNCTION tips_Read() AS Boolean
  RETURN $tips
END
PRIVATE SUB tips_Write(Value AS Boolean)
  $tips = Value
END

PUBLIC SUB Flist_Activate()
  RAISE Activate
END
PUBLIC SUB Flist_Click()
  RAISE Click
END
PUBLIC SUB Flist_Collapse()
  RAISE Collapse
END
PUBLIC SUB Flist_Compare(Key AS String, OtherKey AS String)
  RAISE Compare(Key, OtherKey)
END
PUBLIC SUB Flist_DblClick()
  RAISE DblClick
END
PUBLIC SUB Flist_Drag()
  RAISE Drag
END
PUBLIC SUB Flist_DragMove()
  RAISE DragMove
END
PUBLIC SUB Flist_Drop()
  RAISE Drop
END
PUBLIC SUB Flist_Enter()
  RAISE Enter
END
PUBLIC SUB Flist_Expand()
  RAISE Expand
END
PUBLIC SUB Flist_GotFocus()
  RAISE GotFocus
END
PUBLIC SUB Flist_KeyPress()
  RAISE KeyPress
END
PUBLIC SUB Flist_KeyRelease()
  RAISE KeyRelease
END
PUBLIC SUB Flist_Leave()
  RAISE Leave
END
PUBLIC SUB Flist_LostFocus()
  RAISE LostFocus
END
'PUBLIC SUB Flist_Menu()
'  RAISE Menu
'END
PUBLIC SUB Flist_MouseDown()
  RAISE MouseDown
END
PUBLIC SUB Flist_MouseMove()
  RAISE MouseMove
END
PUBLIC SUB Flist_MouseUp()
  RAISE MouseUp
END
PUBLIC SUB Flist_MouseWheel()
  RAISE MouseWheel
END
'PUBLIC SUB Flist_Rename()
'  RAISE Rename
'END
'PUBLIC SUB Flist_Select()
'  RAISE SELECT
'END

PRIVATE FUNCTION Count_Read() AS Integer
  RETURN $fall.Count
END
PRIVATE FUNCTION Item_Read() AS CFViewItem
  DIM result AS CFViewItem
  IF IsNull(Flist.Item) THEN RETURN NULL
  result = NEW CFViewItem(ME, Flist, Flist.Item.Key)
  RETURN result
END
PRIVATE FUNCTION Current_Read() AS CFViewItem
  DIM result AS CFViewItem
  IF IsNull(Flist.Current) THEN RETURN NULL
  result = NEW CFViewItem(ME, Flist, Flist.Current.Key)
  RETURN result
END
PRIVATE FUNCTION changed_Read() AS Object[]
  DIM result AS NEW Object[]
  DIM t AS CFViewItem
  Flist.MoveFirst
  DO
    IF $fall[Flist.Item.Key].changed THEN 
      t = NEW CFViewItem(ME, Flist, Flist.Item.Key)
      result.Add(t)
    END IF
  LOOP UNTIL Flist.MoveBelow()
  Flist.MoveBack
  RETURN result
END
