
INHERITS ColumnView

EVENT ErrorNotFound()
EVENT Rename()

PROPERTY cols AS String[] ' holding the order and the type of columns to display
PROPERTY fall AS Collection ' holding all CFile-Entries associated with the displayed stuff
PROPERTY selected AS String[] ' holding the paths (key-strings) of all selected files
PROPERTY sort AS Integer ' sets / returns the column to sort after
PROPERTY tips AS Boolean ' show tips about last selected file

PRIVATE $cols AS NEW String[]
PRIVATE $fall AS NEW Collection
PRIVATE $tips AS Boolean
PRIVATE tim AS timer
PRIVATE mx AS Integer
PRIVATE my AS Integer

PUBLIC SUB _new()
  
  Object.Attach(ME, ME, "FList")
  
  SUPER.Editable = TRUE
  SUPER.Sorted = TRUE
  SUPER.Mode = ColumnView.Extended
  
END

PUBLIC SUB tim_Timer()
  
  DIM s AS String
  DIM f AS CFile
  
  IF NOT IsNull(SUPER.Current) AND $tips THEN 
    SUPER.Current.EnsureVisible()
    f = $fall[SUPER.Current.Key]
    s = "Filename: %f\n"
    s &= "Bitrate: %b\n"
    s &= "MP3-Type: MPEG " & f.header.mpegversion & " Layer " & f.header.layer & "\n"
    s &= "Sample-Rate: %s\n"
    s &= "Channels: " & Choose(f.header.channels + 1, "Stereo", "Joint-Stereo", "Dual-Mono", "Mono")
    Balloon.Info(MHelp.replaceByPattern(s, f), ME, mx - ME.ScreenX, my - ME.ScreenY)
  END IF
  
  IF NOT IsNull(tim) THEN tim.Enabled = FALSE
  
END

PUBLIC SUB FList_Select()
  
  IF $tips THEN
    tim = NEW Timer AS "tim"
    tim.Delay = 2000
    tim.Enabled = TRUE
    mx = mouse.ScreenX
    my = mouse.ScreenY
  END IF
  
END


PUBLIC SUB FList_Rename()
  $fall[SUPER.Current.Key].newpath = SUPER.Current[0]
  Message("BLO")
  Object.Detach(ME)
  RAISE Rename
  Object.Attach(ME, ME, "FList")
END

' replaces ColumnView.Add()
PUBLIC SUB Add(entry AS CFile, OPTIONAL pos AS Integer = -1)
  
  IF pos = -1 THEN 
    SUPER.Add(entry.path, "")
  ELSE  
    SUPER.Add(entry.path, "", NULL, NULL, pos)
  END IF
  $fall.Add(entry, entry.path)
  refresh([entry.path])
  
END

' replaces ColumnView.Remove()
PUBLIC SUB Remove(entry AS CFile)
  
  DIM x AS Integer
  
  IF NOT SUPER.Exist(entry.path) THEN 
    RAISE ErrorNotFound
    RETURN 
  END IF
  SUPER.Remove(entry.path)
  $fall.Remove(entry.path)
  
END

' basically is the same as ColumnView.Remove() because it works with the key
PUBLIC SUB RemFromPath(path AS String)
  
  IF NOT SUPER.Exist(path) THEN 
    RAISE ErrorNotFound
    RETURN 
  END IF
  SUPER.Remove(path)
  $fall.Remove(path)
  
END

' refreshes the control
PUBLIC SUB refresh(OPTIONAL paths AS String[] = NULL)
  
  DIM e AS CFile
  DIM s AS String
  DIM y AS Integer
  
  IF IsNull(paths) THEN 
    FOR EACH e IN $fall
      IF NOT SUPER.Exist(e.path) THEN SUPER.Add(e.path, "")
      FOR y = 0 TO $cols.Max
        SUPER[e.path][y] = MHelp.getDesc($cols[y], e)
      NEXT 
    NEXT 
  ELSE 
    FOR EACH s IN paths
      IF NOT $fall.Exist(s) THEN CONTINUE 
      IF NOT SUPER.Exist(s) THEN SUPER.Add(s, "")
      FOR y = 0 TO $cols.Max
        IF $cols[y] = "%b" AND MHelp.getDesc($cols[y], $fall[s]) = -1 THEN 
          SUPER[s][y] = "Variable"
        ELSE IF $cols[y] = "%Y" AND MHelp.getDesc($cols[y], $fall[s]) = 0 THEN 
          SUPER[s][y] = ""
        ELSE
          SUPER[s][y] = MHelp.getDesc($cols[y], $fall[s])
        END IF
      NEXT 
    NEXT 
  END IF    
  
END

PRIVATE FUNCTION cols_Read() AS String[]
  RETURN $cols
END
PRIVATE SUB cols_Write(Value AS String[])
  DIM x AS Integer
  SUPER.Columns.Count = Value.Count
  FOR x = 0 TO Value.Max
    SUPER.Columns[x].Text = MHelp.desc[Value[x]]
  NEXT
  $cols = Value
  refresh
END
PRIVATE FUNCTION fall_Read() AS Collection
  RETURN $fall
END
PRIVATE SUB fall_Write(Value AS Collection)
  $fall = Value
  ME.refresh
END
PRIVATE FUNCTION selected_Read() AS String[]
  DIM result AS String[]
  TRY SUPER.MoveFirst
  DO
    IF SUPER.Item.Selected THEN result.Add(SUPER.Item.Key)
  LOOP UNTIL SUPER.MoveBelow
  SUPER.MoveBack
  RETURN result
END
PRIVATE SUB selected_Write(Value AS String[])
  DIM s AS String
  TRY SUPER.MoveFirst
  DO
    SUPER.Item.Selected = FALSE
  LOOP UNTIL SUPER.MoveBelow
  SUPER.MoveBack
  FOR EACH s IN Value
    SUPER[s].Selected = TRUE
  NEXT
END
PRIVATE FUNCTION sort_Read() AS Integer
  RETURN SUPER.Columns.Sort
END
PRIVATE SUB sort_Write(Value AS Integer)
  SUPER.Columns.Sort = Value
END
PRIVATE FUNCTION tips_Read() AS Boolean
  RETURN $tips
END
PRIVATE SUB tips_Write(Value AS Boolean)
  $tips = Value
END
