
PUBLIC desc AS NEW Collection

PUBLIC SUB _init()
  
  desc.Add("Artist", "%A")
  desc.Add("Album", "%B")
  desc.Add("Year", "%Y")
  desc.Add("Track", "%K")
  desc.Add("Title", "%T")
  desc.Add("Genre", "%G")
  
  desc.Add("Filename", "%f")
  desc.Add("Directory", "%d")
  desc.Add("Bitrate", "%b")
  desc.Add("Samplerate", "%s")
  
END

PUBLIC SUB _exit()
  desc = NULL
END


PUBLIC FUNCTION pat2str(pattern AS Boolean[], OPTIONAL littleEndian AS Boolean = FALSE) AS String
  
  DIM result AS String
  DIM x AS Integer
  DIM y AS Integer
  DIM u AS Integer = Choose(littleEndian, 0, 7)
  DIM v AS Integer = Choose(littleEndian, 7, 0)
  DIM t AS Byte
  
  'IF (pattern.Count MOD 8) <> 0 THEN STOP 
  
  FOR x = 0 TO (pattern.Count - 1) \ 8 + 1
    FOR y = u TO v
      IF (x * 8 + y) > pattern.Count THEN BREAK 
      IF pattern[x * 8 + y] THEN BSet(t, y)
    NEXT 
    IF NOT littleEndian THEN 
      result &= Chr(t)
    ELSE 
      result = Chr(t) & result
    END IF
    IF (x * 8 + y) > pattern.Count THEN BREAK 
    t = 0
  NEXT 
  
  RETURN result
  
END

PUBLIC FUNCTION str2pat(value AS String, OPTIONAL littleEndian AS Boolean = FALSE) AS Boolean[]
  
  DIM result AS NEW Boolean[]
  DIM x AS Integer
  DIM y AS Integer
  DIM u AS Integer = Choose(littleEndian, 0, 7)
  DIM v AS Integer = Choose(littleEndian, 7, 0)
  
  FOR x = 1 TO Len(value)
    FOR y = u TO v
      result.Add(BTst(Asc(value, x), y))
    NEXT 
  NEXT 
  
  RETURN result
  
END

PUBLIC FUNCTION fseek(path AS String, pattern AS Boolean[], bytes2return AS Integer) AS String
  
  DIM f AS File
  DIM b AS String
  DIM x AS Integer
  DIM y AS Integer
  DIM z AS Integer
  DIM result AS String
  
  IF NOT Exist(path) THEN RETURN NULL
  IF Stat(path).Size = 0 THEN RETURN NULL
  IF pattern.Count = 0 THEN RETURN NULL
  IF bytes2return = 0 THEN RETURN NULL
  
  f = OPEN path FOR INPUT 
  x = 0
  y = 0
  z = 0
  
  DO
    IF Seek(f) <> x THEN SEEK #f, x
    'IF (z < 8 AND y >= 8) OR y = 0 THEN READ #f, b, 1
    READ #f, b, 1
    FOR z = 0 TO 7
      IF NOT (BTst(Asc(b), z) XOR pattern[y]) THEN
        IF y = pattern.Max THEN 
          SEEK #f, x - (pattern.Max \ 8 + 1)
          READ #f, b, bytes2return
          CLOSE #f
          RETURN b
        END IF
        INC y
      ELSE 
        y = 0
        BREAK 
      END IF
    NEXT 
    ' Wenn mind. 2. Byte von pattern aber Schleife nicht ganz durchgelaufen (also nicht gleich) ist,
    ' darf nächstes Byte nicht gelesen werden => Kontrolle ob es mit dem ersten Byte von patter übereinstimmt
    IF NOT (y >= 8 AND z < 8) THEN INC x
  LOOP UNTIL Eof(f)
  
  CLOSE #f
  RETURN NULL
  
END

PUBLIC FUNCTION replaceByPattern(text AS String, f AS CFile) AS String
  
  DIM p AS String
  
  FOR EACH p IN desc 
    text = Replace(text, desc.Key, getDesc(desc.Key, f))
  NEXT
  RETURN text
  
END

PUBLIC FUNCTION getDesc(pattern AS String, f AS CFile) AS String

  SELECT CASE pattern
  
    CASE "%A"
      RETURN f.tag.artist
    CASE "%B"
      RETURN f.tag.album
    CASE "%Y"
      RETURN If(f.tag.year <> 0, Str(f.tag.year), "")
    CASE "%K"
      RETURN If(f.tag.track <> 0, Str(f.tag.track), "")
    CASE "%T"
      RETURN f.tag.title
    CASE "%G"
      RETURN f.tag.genre
    
    CASE "%f"
      RETURN File.Name(f.newpath)
    CASE "%d"
      RETURN File.Dir(f.newpath)
    CASE "%b"
      RETURN f.header.bitrate
    CASE "%s"
      RETURN f.header.sampleRate
      
  END SELECT 
  
END

' compares the two given objects and returns if they contain the equal values (not recursive yet)....
PUBLIC FUNCTION isSame(v1 AS Object, v2 AS Object, OPTIONAL recursive AS Boolean = FALSE) AS Boolean
  
  DIM i AS String
  DIM t AS String
  
  IF Object.Type(v1) <> Object.Type(v2) THEN RETURN FALSE
  t = Object.Type(v1)
  
  FOR EACH i IN Classes[t].Symbols
    IF NOT (Classes[t][i].Kind = Class.Property) THEN CONTINUE 
    IF NOT (Object.GetProperty(v1, i) = Object.GetProperty(v2, i)) THEN RETURN FALSE
  NEXT 
  RETURN TRUE
  
END


' sets all values either on .getNone(identifier as string), "" or NULL, depending on the current
' implementation of the class to merge (is number, is string or is object)
PUBLIC CONST mergeDelete AS Integer = 0

' if value is a number, it is set to the lowest appearing value
' otherwise it is set to the first appearing value of it's kind
PUBLIC CONST mergeMin AS Integer = 1

' if value is a number, it is set to the average of all values of it's kind,
' otherwise it is set to the value in the middle (and to the first value in the middle if values.Count()
' is even respectively)
PUBLIC CONST mergeAverage AS Integer = 2

' if value is a number, it is set to the highest appearing value
' otherwise it is set to the last appearing value of it's kind
PUBLIC CONST mergeMax AS Integer = 3

PUBLIC FUNCTION merge(values AS Object[], OPTIONAL onDiffer AS Integer = mergeDelete) AS Object
  
  DIM o AS Object
  DIM i AS String
  DIM x AS Boolean
  DIM result AS Object
  DIM t AS String
  DIM v1 AS Variant
  DIM v2 AS Variant
  DIM avg AS NEW Collection
  DIM tmpArray AS Object[]
  
  IF values.Count = 0 THEN RETURN NULL
  t = Object.Type(values[0])
  
  result = NEW (t)
  
  FOR EACH i IN Classes[t].Symbols
    IF NOT (Classes[t][i].Kind = Class.Property) THEN CONTINUE 
    IF Classes[t][i].ReadOnly THEN CONTINUE 
    FOR EACH o IN values
      IF NOT x THEN 
        TRY Object.SetProperty(result, i, Object.GetProperty(o, i))
        x = TRUE
      ELSE 
        v1 = NULL
        v2 = NULL
        TRY v1 = Object.GetProperty(result, i)
        TRY v2 = Object.GetProperty(o, i)
        
        IF NOT (v1 = v2) THEN 
          SELECT CASE onDiffer
          
            CASE mergeDelete
              IF IsNumber(v1) THEN 
                TRY Object.SetProperty(result, i, Object.Call(result, "getNone", [i]))
              ELSE IF IsString(v1) THEN 
                TRY Object.SetProperty(result, i, "")
              ELSE IF IsObject(v1) THEN 
                tmpArray = NEW Object[]
                tmpArray.Add(v1)
                tmpArray.Add(v2)
                TRY Object.SetProperty(result, i, merge(tmpArray))
              ELSE 
                TRY Object.SetProperty(result, i, NULL)
              END IF
              
            CASE mergeMin
              IF IsNumber(v2) THEN 
                IF avg.Exist(i) THEN 
                  IF avg[i] > v2 THEN avg[i] = v2
                ELSE 
                  avg.Add(v2, i)
                END IF
              END IF
              
            CASE mergeMax
              IF IsNumber(v2) THEN 
                IF avg.Exist(i) THEN 
                  IF avg[i] < v2 THEN avg[i] = v2
                ELSE 
                  avg.Add(v2, i)
                END IF
              END IF
            
            CASE mergeAverage
              IF IsNumber(v2) THEN
                IF avg.Exist(i) THEN
                  avg[i] += v2
                ELSE 
                  avg.Add(v2, i)
                END IF
              END IF
            
          END SELECT 
        END IF
        
      END IF
    NEXT 
    x = FALSE
  NEXT
  
  SELECT CASE onDiffer
  
    CASE mergeMin
      FOR EACH i IN Classes[t].Symbols
        IF NOT (Classes[t][i].Kind = Class.Property) THEN CONTINUE 
        IF IsNumber(Object.GetProperty(values[0], i)) THEN 
          TRY Object.SetProperty(result, i, avg[i])
        ELSE 
          TRY Object.SetProperty(result, i, Object.GetProperty(values[0], i))
        END IF
      NEXT 
      
    CASE mergeMax
      FOR EACH i IN Classes[t].Symbols
        IF NOT (Classes[t][i].Kind = Class.Property) THEN CONTINUE 
        IF IsNumber(Object.GetProperty(values[0], i)) THEN 
          TRY Object.SetProperty(result, i, avg[i])
        ELSE 
          TRY Object.SetProperty(result, i, Object.GetProperty(values[values.Max], i))
        END IF
      NEXT 
      
    CASE mergeAverage
      FOR EACH i IN Classes[t].Symbols
        IF NOT (Classes[t][i].Kind = Class.Property) THEN CONTINUE 
        IF IsNumber(Object.GetProperty(values[0], i)) THEN 
          TRY Object.SetProperty(result, i, avg[i] / values.Count)
        ELSE 
          TRY Object.SetProperty(result, i, Object.GetProperty(values[values.Max \ 2], i))
        END IF
      NEXT
      
  END SELECT 
  
  RETURN result
  
END


